name: Workflow
on:
  push:
    branches: 
      - develop
jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      db_service:
        image: mysql:5.7
        env:
          TZ: America/Sao_Paulo
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE:  movieaddictdb
          MYSQL_USER: movieaddictrestapiuserdb
          MYSQL_PASSWORD: movieaddicrestapiuserpassword
          MYSQL_ALLOW_EMPTY_PASSWORD: no
        options: >-
          --health-cmd "mysqladmin ping" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 10
        ports:
          - 3306:3306

    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Installing pipenv
        run: python -m pip install --upgrade pip && pip install pipenv
        
      - name: Caching pipenv
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy

      - name: Run tests
        run: |
          pipenv run pytest -v
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DBNAME: movieaddictdb
          MYSQL_USER: movieaddictrestapiuserdb
          MYSQL_PASSWORD: movieaddicrestapiuserpassword
          MYSQL_SERVICE_HOST: mysql
          MYSQL_SERVICE_PORT: 3306
          DB_TRACK_MODIFICATIONS: false

  lint:
    needs: tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Startup
        run: echo "Starting up linter job"

      - name: Get code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
                
      - name: Installing pipenv
        run: python -m pip install --upgrade pip && pip install pipenv
      
      - name: Caching pipenv
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy

      - name: Analysing the code with pylint
        run: | 
          pipenv run pylint ../movie-addict-api --rcfile .pylintrc --verbose

      - name: Shutdown
        run: echo "Linter job finished"

  coverage:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Pending
        run: | 
          echo "pending https://coverage.readthedocs.io/en/7.2.3/"
          echo "use coverage run -m pytest -v, then coverage report --format total"

      - name: Startup
        run: echo "Starting up coverage job"
  
      - name: Get code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
                
      - name: Installing pipenv
        run: python -m pip install --upgrade pip && pip install pipenv
      
      - name: Caching pipenv
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy

      - name: Run coverage and expose rating
        id: coverage
        run: |
          pipenv run coverage run -m pytest -v && coverage report --format total echo 'coverage-rating={}' >> $GITHUB_OUTPUT ';' 

      - name: Output filename
        run: echo "${{ steps.coverage.outputs.coverage-rating }}" 
  
  type-check:
      needs: coverage
      runs-on: ubuntu-latest
      steps:
        - name: Pending
          run: echo "pending https://microsoft.github.io/pyright/#/installation"
      # - name: Setup node.js (for pyright)
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: "12"

      # - name: Run type checking
      #   run: |
      #     npm install -g pyright
      #     pipenv run typecheck